#!/usr/bin/env bash
# Podsenv Versions Command
# 列出已安装的 CocoaPods 版本

set -euo pipefail

# 加载核心库
PODSENV_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" && pwd)"
# shellcheck source=lib/podsenv-core.sh
source "${PODSENV_ROOT}/lib/podsenv-core.sh"
# shellcheck source=lib/podsenv-version.sh
source "${PODSENV_ROOT}/lib/podsenv-version.sh"

# 选项
BARE_OUTPUT=false
SHOW_REMOTE=false

# 解析命令行参数
parse_args() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      --bare)
        BARE_OUTPUT=true
        shift
        ;;
      --remote)
        SHOW_REMOTE=true
        shift
        ;;
      -h|--help)
        exec "${PODSENV_ROOT}/bin/podsenv" help versions
        ;;
      -*)
        podsenv_error "Unknown option: $1"
        ;;
      *)
        podsenv_error "Unexpected argument: $1"
        ;;
    esac
  done
}

# 显示已安装版本
show_installed_versions() {
  local current_version
  local version_source
  local versions
  
  # 获取当前版本
  current_version="$(podsenv_detect_version 2>/dev/null || echo "")"
  
  # 获取已安装版本
  versions="$(podsenv_installed_versions)"
  
  if [ -z "$versions" ]; then
    if [ "$BARE_OUTPUT" = "false" ]; then
      podsenv_log "info" "No CocoaPods versions installed"
      echo "Run 'podsenv install <version>' to install a version"
    fi
    return
  fi
  
  if [ "$BARE_OUTPUT" = "true" ]; then
    echo "$versions"
    return
  fi
  
  # 显示版本列表
  while IFS= read -r version; do
    local marker=" "
    local info=""
    
    # 标记当前版本
    if [ "$version" = "$current_version" ]; then
      marker="*"
    fi
    
    # 获取版本来源信息
    if [ "$version" = "$current_version" ]; then
      version_source="$(podsenv_get_version_source "$version")"
      info=" (set by $version_source)"
    fi
    
    printf "%s %s%s\n" "$marker" "$version" "$info"
  done <<< "$versions"
  
  # 检查系统版本
  if podsenv_command_exists "pod" && [ "$(command -v pod)" != "${PODSENV_SHIMS_DIR}/pod" ]; then
    local system_marker=" "
    local system_info=""
    
    if [ "system" = "$current_version" ]; then
      system_marker="*"
      version_source="$(podsenv_get_version_source "system")"
      system_info=" (set by $version_source)"
    fi
    
    printf "%s system%s\n" "$system_marker" "$system_info"
  fi
}

# 显示远程可用版本
show_remote_versions() {
  podsenv_log "info" "Fetching available versions..."
  
  local versions
  versions="$(podsenv_available_versions)"
  
  if [ -z "$versions" ]; then
    podsenv_error "Failed to fetch remote versions"
  fi
  
  if [ "$BARE_OUTPUT" = "true" ]; then
    echo "$versions"
    return
  fi
  
  echo "Available versions:"
  
  # 获取已安装版本用于标记
  local installed_versions
  installed_versions="$(podsenv_installed_versions)"
  
  while IFS= read -r version; do
    local marker=" "
    
    # 标记已安装版本
    if echo "$installed_versions" | grep -q "^${version}$"; then
      marker="*"
    fi
    
    printf "%s %s\n" "$marker" "$version"
  done <<< "$versions"
  
  echo
  echo "* = installed"
}

# 显示版本统计信息
show_version_stats() {
  if [ "$BARE_OUTPUT" = "true" ]; then
    return
  fi
  
  local installed_count
  local current_version
  
  installed_count="$(podsenv_installed_versions | wc -l | xargs)"
  current_version="$(podsenv_detect_version 2>/dev/null || echo "none")"
  
  echo
  echo "Summary:"
  echo "  Installed versions: $installed_count"
  echo "  Current version: $current_version"
  
  if [ "$current_version" != "none" ] && [ "$current_version" != "system" ]; then
    local version_source
    version_source="$(podsenv_get_version_source "$current_version")"
    echo "  Version source: $version_source"
  fi
}

# 主函数
main() {
  # 解析参数
  parse_args "$@"
  
  if [ "$SHOW_REMOTE" = "true" ]; then
    show_remote_versions
  else
    show_installed_versions
    
    if [ "$BARE_OUTPUT" = "false" ]; then
      show_version_stats
    fi
  fi
}

# 执行主函数
main "$@"