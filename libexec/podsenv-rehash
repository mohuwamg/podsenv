#!/usr/bin/env bash
# Podsenv Rehash Command
# 重建 shim 脚本

set -euo pipefail

# 加载核心库
PODSENV_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" && pwd)"
# shellcheck source=lib/podsenv-core.sh
source "${PODSENV_ROOT}/lib/podsenv-core.sh"
# shellcheck source=lib/podsenv-version.sh
source "${PODSENV_ROOT}/lib/podsenv-version.sh"

# 选项
VERBOSE=false

# 解析命令行参数
parse_args() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      -h|--help)
        exec "${PODSENV_ROOT}/bin/podsenv" help rehash
        ;;
      -*)
        podsenv_error "Unknown option: $1"
        ;;
      *)
        podsenv_error "Unexpected argument: $1"
        ;;
    esac
  done
}

# 创建 shim 脚本
create_shim() {
  local command="$1"
  local shim_path="${PODSENV_SHIMS_DIR}/${command}"
  
  podsenv_log "debug" "Creating shim for: $command"
  
  cat > "$shim_path" << 'EOF'
#!/usr/bin/env bash
# Podsenv Shim Script
# Auto-generated by podsenv rehash

set -euo pipefail

# 确定 PODSENV_ROOT
if [ -z "${PODSENV_ROOT:-}" ]; then
  PODSENV_ROOT="${HOME}/.podsenv"
fi

# 加载核心库
# shellcheck source=lib/podsenv-core.sh
source "${PODSENV_ROOT}/lib/podsenv-core.sh" 2>/dev/null || {
  echo "podsenv: error: failed to load core library" >&2
  exit 1
}

# shellcheck source=lib/podsenv-version.sh
source "${PODSENV_ROOT}/lib/podsenv-version.sh" 2>/dev/null || {
  echo "podsenv: error: failed to load version library" >&2
  exit 1
}

# 获取命令名
COMMAND="$(basename "$0")"

# 检测当前版本
VERSION="$(podsenv_detect_version 2>/dev/null || echo "")"

if [ -z "$VERSION" ]; then
  echo "podsenv: error: no CocoaPods version specified" >&2
  echo "Run 'podsenv global <version>' to set a global version" >&2
  echo "Or 'podsenv local <version>' to set a local version" >&2
  exit 1
fi

# 检查版本是否可用
if ! podsenv_version_available "$VERSION"; then
  if [ "$VERSION" = "system" ]; then
    echo "podsenv: error: system CocoaPods not found" >&2
    echo "Install CocoaPods system-wide or use 'podsenv install <version>'" >&2
  else
    echo "podsenv: error: CocoaPods $VERSION is not installed" >&2
    echo "Run 'podsenv install $VERSION' to install it" >&2
  fi
  exit 1
fi

# 获取命令路径
COMMAND_PATH="$(podsenv_version_path "$VERSION")"

if [ ! -x "$COMMAND_PATH" ]; then
  echo "podsenv: error: $COMMAND not found in $VERSION" >&2
  exit 1
fi

# 设置环境变量
podsenv_set_version_env "$VERSION"

# 执行命令
exec "$COMMAND_PATH" "$@"
EOF
  
  chmod +x "$shim_path"
  
  if [ "$VERBOSE" = "true" ]; then
    podsenv_log "info" "Created shim: $shim_path"
  fi
}

# 发现可用命令
discover_commands() {
  local commands=()
  local versions
  
  # 获取已安装版本
  versions="$(podsenv_installed_versions)"
  
  if [ -z "$versions" ]; then
    podsenv_log "debug" "No installed versions found"
    return
  fi
  
  # 遍历每个版本的 bin 目录
  while IFS= read -r version; do
    local bin_dir
    bin_dir="$(podsenv_gem_bin_dir "$version")"
    
    if [ -d "$bin_dir" ]; then
      # 查找可执行文件
      while IFS= read -r -d '' executable; do
        local command
        command="$(basename "$executable")"
        
        # 过滤掉一些不需要的命令
        case "$command" in
          "bundle" | "bundler" | "gem" | "rake" | "ruby")
            continue
            ;;
        esac
        
        # 添加到命令列表
        if [ ${#commands[@]} -eq 0 ] || [[ ! " ${commands[*]:-} " =~ " ${command} " ]]; then
          commands+=("$command")
        fi
      done < <(find "$bin_dir" -type f -perm +111 -print0 2>/dev/null || true)
    fi
  done <<< "$versions"
  
  # 确保 pod 命令存在
  if [ ${#commands[@]} -eq 0 ] || [[ ! " ${commands[*]:-} " =~ " pod " ]]; then
    commands+=("pod")
  fi
  
  printf '%s\n' "${commands[@]}"
}

# 清理旧的 shims
clean_shims() {
  if [ -d "$PODSENV_SHIMS_DIR" ]; then
    podsenv_log "debug" "Cleaning old shims"
    rm -f "${PODSENV_SHIMS_DIR}"/*
  else
    podsenv_ensure_dir "$PODSENV_SHIMS_DIR"
  fi
}

# 创建所有 shims
create_all_shims() {
  local commands
  local command_count=0
  
  # 发现命令
  commands="$(discover_commands)"
  
  if [ -z "$commands" ]; then
    podsenv_log "warn" "No commands found to create shims for"
    return
  fi
  
  # 创建 shims
  while IFS= read -r command; do
    if [ -n "$command" ]; then
      create_shim "$command"
      command_count=$((command_count + 1))
    fi
  done <<< "$commands"
  
  podsenv_log "success" "Created $command_count shim(s)"
  
  if [ "$VERBOSE" = "true" ]; then
    echo "Shims created for:"
    echo "$commands" | sed 's/^/  /'
  fi
}

# 验证 shims
validate_shims() {
  local shim_count
  local executable_count
  
  if [ ! -d "$PODSENV_SHIMS_DIR" ]; then
    podsenv_log "warn" "Shims directory does not exist"
    return
  fi
  
  shim_count=$(find "$PODSENV_SHIMS_DIR" -type f | wc -l | xargs)
  executable_count=$(find "$PODSENV_SHIMS_DIR" -type f -perm +111 | wc -l | xargs)
  
  if [ "$shim_count" -eq 0 ]; then
    podsenv_log "warn" "No shims found"
  elif [ "$shim_count" != "$executable_count" ]; then
    podsenv_log "warn" "Some shims are not executable ($executable_count/$shim_count)"
  else
    podsenv_log "debug" "All $shim_count shims are executable"
  fi
}

# 显示 rehash 信息
show_rehash_info() {
  if [ "$VERBOSE" = "false" ]; then
    return
  fi
  
  echo
  echo "Rehash completed successfully!"
  echo
  echo "Shims directory: $PODSENV_SHIMS_DIR"
  
  if [ -d "$PODSENV_SHIMS_DIR" ]; then
    local shim_count
    shim_count=$(find "$PODSENV_SHIMS_DIR" -type f | wc -l | xargs)
    echo "Total shims: $shim_count"
    
    if [ "$shim_count" -gt 0 ]; then
      echo "Available commands:"
      find "$PODSENV_SHIMS_DIR" -type f -perm +111 -exec basename {} \; | sort | sed 's/^/  /'
    fi
  fi
  
  echo
  echo "Make sure $PODSENV_SHIMS_DIR is in your PATH:"
  echo "  export PATH=\"$PODSENV_SHIMS_DIR:\$PATH\""
}

# 主函数
main() {
  # 解析参数
  parse_args "$@"
  
  podsenv_log "info" "Rebuilding shims..."
  
  # 清理旧的 shims
  clean_shims
  
  # 创建新的 shims
  create_all_shims
  
  # 验证 shims
  validate_shims
  
  # 显示信息
  show_rehash_info
}

# 执行主函数
main "$@"